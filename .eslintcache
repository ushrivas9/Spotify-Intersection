[{"C:\\Users\\upman\\Desktop\\Desk\\LEARN\\Intersection\\intersection\\src\\App.js":"1"},{"size":6967,"mtime":1614187435936,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"swppxo","C:\\Users\\upman\\Desktop\\Desk\\LEARN\\Intersection\\intersection\\src\\App.js",["7","8","9","10","11"],"//import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\n\nimport { useStateWithCallbackLazy } from \"use-state-with-callback\";\n\nconst axios = require(\"axios\");\n\nconst getDataUrl = \"https://api.spotify.com/v1/me/top/tracks\";\nconst makePlaylistUrl = \"https://api.spotify.com/v1/users/\";\nconst userUrl = \"https://api.spotify.com/v1/me\";\n\nconst useStyles = makeStyles((theme) => ({\n  spotifyTheme: {\n    background: \"#1aa34a\",\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n}));\n\nexport default function App(props) {\n  const classes = useStyles();\n  const params = getHashParams();\n\n  const token = params.access_token;\n  if (token) {\n    sessionStorage.setItem(\"authtoken\", token);\n  }\n  let initialVal = sessionStorage.getItem(\"playerData\")\n    ? JSON.parse(sessionStorage.getItem(\"playerData\"))\n    : [];\n\n  const [playerData, setPlayerData] = useState(initialVal);\n  const [userID, setUserID] = useState(\"\");\n  const [addTrackUrl, setAddTrackUrl] = useState(\"\");\n  //const [addTrackUrl, setAddTrackUrl] = useStateWithCallbackLazy(\"\");\n\n  function getTopArtists() {\n    var auth = \"Bearer \" + sessionStorage.getItem(\"authtoken\");\n    const headers = {\n      Authorization: auth,\n    };\n\n    axios({\n      method: \"get\",\n      url: getDataUrl,\n      headers,\n    })\n      .then((response) => {\n        console.log(\"GET DATA SUCCESSFUL\");\n        var temp = playerData;\n        var temp2 = temp.concat(response.data);\n\n        sessionStorage.setItem(\"playerData\", JSON.stringify(temp2));\n        console.log(\"Data:\", temp2);\n        setPlayerData(temp2);\n\n        getCurrentUserID();\n      })\n      .catch(function (error) {\n        console.log(\"GET DATA ERROR\");\n        console.log(error);\n      });\n  }\n\n  function enable1Button(playernum) {\n    if (playernum === 0) {\n      return <button onClick={() => getTopArtists()}>Get My data</button>;\n    }\n  }\n\n  function enable2Button(playernum) {\n    if (playernum <= 1) {\n      return <button onClick={() => getTopArtists()}>Get My data</button>;\n    }\n  }\n\n  function getCurrentUserID() {\n    var auth = \"Bearer \" + sessionStorage.getItem(\"authtoken\");\n    const headers = {\n      Authorization: auth,\n    };\n\n    axios({\n      method: \"get\",\n      url: userUrl,\n      headers,\n    })\n      .then((response) => {\n        console.log(\"GET USERPROFILE SUCCESSFUL\");\n        var temp = response.data[\"id\"];\n        //sessionStorage.setItem(\"userID\", temp);\n        setUserID(temp);\n      })\n      .catch(function (error) {\n        console.log(\"GET USERPROFILE ERROR\");\n        console.log(error);\n      });\n  }\n\n  function makeIntersectionPlaylist() {\n    var auth = \"Bearer \" + sessionStorage.getItem(\"authtoken\");\n    var mplurl = makePlaylistUrl + userID + \"/playlists\";\n\n    const headers = {\n      Authorization: auth,\n    };\n\n    axios({\n      method: \"post\",\n      url: mplurl,\n      headers,\n      data: {\n        name: \"IntersectionPlaylist\",\n      },\n    })\n      .then((response) => {\n        console.log(\"CREATE PLAYLIST SUCCESSFUL\");\n        var temp = response.data[\"href\"];\n\n        getAddIntersectSongs(temp);\n        //setAddTrackUrl(temp, addIntersectSongs);\n      })\n      .catch(function (error) {\n        console.log(\"CREATE PLAYLIST ERROR\");\n        console.log(error);\n      });\n  }\n\n  async function getAddIntersectSongs(playlistUrl) {\n    var auth = \"Bearer \" + sessionStorage.getItem(\"authtoken\");\n    var plURL = playlistUrl + \"/tracks\";\n\n    var arr = await getCommonTracks();\n\n    //arr = [playerData[0][\"items\"][0][\"uri\"]];\n\n    const headers = {\n      Authorization: auth,\n    };\n\n    axios({\n      method: \"post\",\n      url: plURL,\n      headers,\n      data: {\n        uris: arr,\n      },\n    })\n      .then((response) => {\n        console.log(\"ADDING TRACKS SUCCESSFUL\");\n      })\n      .catch(function (error) {\n        console.log(\"ADDING TRACKS ERROR\");\n        console.log(error);\n      });\n  }\n\n  function getCommonTracks() {\n    //sleep(3000);\n    //return [playerData[0][\"items\"][0][\"uri\"]];\n    let arr = [];\n    let set = new Set();\n    for (let i = 0; i < playerData[0][\"items\"].length; i++) {\n      set.add(playerData[0][\"items\"][i][\"uri\"]);\n    }\n    for (let i = 0; i < playerData[1][\"items\"].length; i++) {\n      if (set.has(playerData[1][\"items\"][i][\"uri\"])) {\n        arr.push(playerData[1][\"items\"][i][\"uri\"]);\n      }\n    }\n    return arr;\n  }\n\n  function sleep(milliseconds) {\n    const date = Date.now();\n    let currentDate = null;\n    do {\n      currentDate = Date.now();\n    } while (currentDate - date < milliseconds);\n  }\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n\n      <AppBar className={classes.spotifyTheme} position=\"relative\">\n        <Toolbar>\n          <Typography variant=\"h6\" align=\"left\" color=\"inherit\">\n            Spotify Intersection\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n      <Grid container spacing={3}>\n        <Grid item xs={6}>\n          <Paper className={classes.paper}>\n            <a href=\"http://localhost:8888/login\">\n              Player1 Login to Spotify Intersection\n            </a>\n            <div>{enable1Button(playerData.length)}</div>\n            <div>\n              {playerData.length >= 1 && (\n                <Typography variant=\"subtitle1\" gutterBottom>\n                  Have Player1 Data Now\n                </Typography>\n              )}\n            </div>\n          </Paper>\n        </Grid>\n\n        <Grid item xs={6}>\n          <Paper className={classes.paper}>\n            <a href=\"http://localhost:8888/login\">\n              Player2 Login to Spotify Intersection\n            </a>\n            <div>{enable2Button(playerData.length)}</div>\n            <div>\n              {playerData.length === 2 && (\n                <Typography variant=\"subtitle1\" gutterBottom>\n                  Have Player2 Data Now\n                </Typography>\n              )}\n            </div>\n          </Paper>\n        </Grid>\n        <Grid item xs={12}>\n          <Paper className={classes.paper}>\n            intersects\n            <div>\n              {playerData.length === 2 && (\n                <button onClick={() => makeIntersectionPlaylist()}>\n                  Make the playlist!\n                </button>\n              )}\n            </div>\n          </Paper>\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n}\n\nfunction getHashParams() {\n  var hashParams = {};\n  var e,\n    r = /([^&;=]+)=?([^&;]*)/g,\n    q = window.location.hash.substring(1);\n  while ((e = r.exec(q))) {\n    hashParams[e[1]] = decodeURIComponent(e[2]);\n  }\n  return hashParams;\n}\n",{"ruleId":"12","severity":1,"message":"13","line":2,"column":27,"nodeType":"14","messageId":"15","endLine":2,"endColumn":36},{"ruleId":"12","severity":1,"message":"16","line":11,"column":10,"nodeType":"14","messageId":"15","endLine":11,"endColumn":34},{"ruleId":"12","severity":1,"message":"17","line":44,"column":10,"nodeType":"14","messageId":"15","endLine":44,"endColumn":21},{"ruleId":"12","severity":1,"message":"18","line":44,"column":23,"nodeType":"14","messageId":"15","endLine":44,"endColumn":37},{"ruleId":"12","severity":1,"message":"19","line":184,"column":12,"nodeType":"14","messageId":"15","endLine":184,"endColumn":17},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useStateWithCallbackLazy' is defined but never used.","'addTrackUrl' is assigned a value but never used.","'setAddTrackUrl' is assigned a value but never used.","'sleep' is defined but never used."]